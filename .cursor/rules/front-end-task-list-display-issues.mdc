---
description: Troubleshooting of front-end task list display issues
globs: 
alwaysApply: false
---
# 前端显示问题排查指南

## 问题背景

在科研仪器维修APP开发过程中，我们遇到了几个与任务列表显示相关的问题：

1. 任务中心页面无法正常显示任务卡片列表
2. "全部"标签下不显示任务，但其他标签（待处理、进行中、已完成）正常显示
3. 下拉刷新导致"全部"标签下的任务列表再次消失

## 解决方案总结

### 列表不显示的常见原因

1. **前后端数据格式不一致**：前端期望的字段名与后端返回的不匹配
2. **API请求参数问题**：特殊参数值（如空字符串、null、undefined）处理不当
3. **组件渲染条件**：v-if/v-else-if条件判断逻辑有误
4. **数据转换遗漏**：后端返回的原始数据缺少前端渲染所需的额外属性
5. **HTTP配置问题**：baseURL配置与代理设置冲突导致跨域
6. **路由参数使用不当**：如使用数字ID而非字符串编号调用API

### 关键排查步骤

1. **检查网络请求**：
   - 确认API是否正确调用，检查请求URL和参数
   - 查看响应数据格式和内容是否符合预期
   - 确认请求状态码是否为200

2. **检查数据流转路径**：
   - API层 → Store层 → 组件层的数据传递是否完整
   - 每一层是否有数据转换逻辑，可能导致数据丢失

3. **检查渲染条件**：
   - 组件的v-if/v-else-if/v-else条件是否合理
   - 检查条件表达式中引用的变量是否有值

4. **增加调试输出**：
   - 在关键节点添加console.log输出数据状态
   - 添加直接API调用按钮，绕过中间层测试

5. **检查组件响应式**：
   - Pinia/Vuex状态是否正确绑定到组件
   - 组件是否正确响应状态变化

## 常见修复方法

1. **组件化重构**：
   - 将复杂UI组件拆分为更小、更可维护的组件
   - 使用Props和事件实现组件间通信

2. **数据预处理**：
   - 在Store层为API返回的数据添加UI所需的额外属性
   - 处理可能缺失的字段，提供默认值

3. **参数处理规范化**：
   - 特殊值（如null、undefined、空字符串）的一致处理
   - 请求前清理不必要的参数

4. **多层容错机制**：
   - 主方案失败时提供备选方案
   - 为特殊情况（如"全部"标签）提供专门的处理逻辑

5. **HTTP配置优化**：
   - 使用相对路径配合代理，避免跨域问题
   - 统一响应处理，规范化错误处理

## 具体经验总结

### 1. 参数处理的一致性很重要

不同的API处理参数的方式可能不同，需要保持前端发送参数的一致性：

```javascript
// 不推荐：在不同地方使用不同的参数处理方式
params1 = { status: activeFilter === 'all' ? '' : activeFilter }
params2 = { status: activeFilter === 'all' ? null : activeFilter }

// 推荐：统一处理方式
function getParams(filter) {
  return { status: filter === 'all' ? null : filter }
}
```

### 2. 预处理API响应数据

在Store层中预处理API返回的数据，确保满足UI需求：

```javascript
// 推荐做法
const processedData = response.data.records.map(item => {
  // 添加UI显示所需的属性
  if (!item.statusText) {
    item.statusText = getStatusText(item.status)
  }
  
  // 处理可能缺失的数组
  if (!item.engineers) {
    item.engineers = []
  }
  
  return item
})
```

### 3. 添加备选方案和容错处理

当主要方法失败时，提供备选方案：

```javascript
try {
  // 主要请求方案
  const result = await primaryRequest()
  
  if (!result.success) {
    // 如果主请求失败，尝试备选方案
    await fallbackRequest()
  }
} catch (err) {
  // 发生异常时也尝试备选方案
  await fallbackRequest()
}
```

### 4. 保持日志的完整性

添加详细的日志输出，方便调试：

```javascript
console.log('请求参数:', params)
const response = await api.getData(params)
console.log('响应结果:', response)

// 记录关键决策点
if (someCondition) {
  console.log('条件满足，执行方案A')
} else {
  console.log('条件不满足，执行方案B')
}
```

### 5. 组件间的数据传递

使用Props和事件进行父子组件通信，避免直接修改Props：

```vue
<!-- 父组件 -->
<TaskCard 
  :task="task"
  @update="handleUpdate"
/>

<!-- 子组件中 -->
<script>
export default {
  props: {
    task: {
      type: Object,
      required: true
    }
  },
  methods: {
    updateStatus() {
      // 通过事件通知父组件
      this.$emit('update', { id: this.task.id, status: 'completed' })
    }
  }
}
</script>
```

## 预防措施

1. **制定API规范**：确保前后端对接口参数和返回值有明确约定
2. **编写单元测试**：为关键组件和功能编写测试用例
3. **添加类型检查**：使用TypeScript或PropTypes增强类型安全
4. **实现API模拟**：在前端开发阶段使用Mock数据进行测试
5. **增加错误监控**：添加全局错误处理和日志记录
6. **代码审查**：重点关注数据处理和UI渲染逻辑

## 参考资源

1. [Vue官方文档 - 列表渲染](mdc:https:/vuejs.org/guide/essentials/list.html)
2. [Pinia状态管理](mdc:https:/pinia.vuejs.org)
3. [Axios请求配置](mdc:https:/axios-http.com/docs/config_defaults)
4. [Vite代理配置](mdc:https:/vitejs.dev/config/server-options.html#server-proxy) 