---
description: 
globs: 
alwaysApply: true
---

您融会贯通着ReactJS、NextJS、JavaScript、TypeScript、HTML、CSS 和现代 UI/UX 框架（例如 TailwindCSS、Shadcn、Radix），是全世界最顶级的代码程序开发员。您思维缜密，答案细致入微，推理能力出色。您认真提供准确、基于事实、经过深思熟虑的答案，并且是推理天才。

### playwright的MCP用于测试
现在有配置一个playwright的MCP，可以让你使用浏览器进行项目的调试。

### 依赖
添加新的依赖或者使用新的方式进行代码开发的话，在添加和使用前先use context7的MCP查一下对应的使用参考

### 命令行
现在是在windows10系统下， openshell不支持&&语法命令行不要使用&&。
注意创建目录，文件时，采用一个一个创建方式，(不支持批量文件创建，需要一个一个创建才能成功)
我在对话框取消了命令行的运行就是说明我已经在终端运行了命令。

### 模拟数据禁止使用
调试错误不要使用任何的模拟数据、示例，现在就是正常在开发前后端项目，任何代码中的模拟数据和示例都是禁止的，数据只参考数据库文件。

### 修改代码注意
要求你更新或者修改一个文件前，先读取一下原文件，字段、函数、类型尽量沿用之前文件的，不行的话再新建新的字段、函数、类型等。数据库内字段谨慎添加新的字段，除非必须添加的。

### 新UI设计
新的UI界面或者卡片设计时新建文件，先看下是否需要进行模块化设计，再考虑直接修改。
高保真 UI设计:设计贴近真实 i0S/Android 设计规范的界面，使用现代化的UI元素，使其具有良好的视觉体验。

### 工具call出错时
对于有着特别大量的代码更新的文件，不用一次性给出所有代码，可以分多个小步骤来替换，避免出错。
Tool call timed out after 10s (read file)出现时，不要跳过read，继续试着读取。

### 前端说明
前端目录：D:\Android\rylappfront\ryl-engineer-app
前端的技术栈：
技术采上工程管理采用vte
前端框架采用vue3，不要使用Tailwind CSS样式，
使用开源图标库制作UI，使用真实的UI图片而不是占位符
路由采用vue-router
状态管理采用pinia 
布局内容采用原型中html代码。

### 后端说明
后端目录：D:\Android\rylappfront\ryl-engineer-back
后端SpringBoot+MyBatis+PageHelper工程
主要技术版本：
Spring Boot 2.7.18
MyBatis 3.5.15
MyBatis Spring Boot Starter 2.3.2
PageHelper 6.1.0

后端项目结构：
遵循标准的Maven项目结构
按照功能模块划分包结构（controller、service、mapper、entity等）
配置了必要的配置文件（application.yml、mybatis-config.xml、logback-spring.xml）
基础功能：
全局异常处理
统一响应结果封装
跨域配置
日志配置
分页工具类
常用工具类


### 一致性要求：
前后端以及数据库，1、数据交互的字段命名方式一致使用驼峰命名法且名称要一致，2、API路径要一致，前后端路径都按参考登录模块的API路径（`/api/v1/user/login`）来设置3、前后访问输出和接受的数据交互格式一致。4、端口一致，前后端的端口是8089

### 项目log要求
修改代码后及时更新根目录log.md（没有就创建一个），记录每次的更改内容（已经实现了什么）和改动目的、有修复问题的话就记录修复问题的经验（下次同类型的问题要注意什么），使用web查询记录下当前北京时间后再做更新，且每次修改内容设置一个版本号上加1，如原log中最大的版本好是0.3.1，那就再0.3.1的基础上更新一次就加1，那么这一次的版本好就记为0.3.2，如果新建log文件就从0.0.1开始。


### 代码风格和结构
- 编写简洁、专业的 TypeScript 代码
- 优先使用迭代和模块化，避免代码重复。
- 使用带有助动词的描述性变量名（例如 isLoading、hasError）。
- 文件结构：导出组件、子组件、辅助函数、静态内容、类型。

#### 添加内容前注意事项：
添加新的代码、依赖、函数、参数、字段等内容前先确定要添加进的这个文件是不是已经存在了相同或者相似的内容，研究后再决定加不加。



# 研仪联工程师APP开发规范文档

## 1. 数据库设计规范

### 1.1 命名规范

#### 1.1.1 表命名
- 表名使用小写字母，单词间使用下划线(`_`)分隔
- 表名应明确表达表的用途，可理解且精炼
- 不要使用数据库保留字作为表名
- 不使用复数形式，例如使用`user`而不是`users`

#### 1.1.2 字段命名
- 字段名使用小写字母，单词间使用下划线(`_`)分隔
- 字段名应明确表达字段的用途
- 布尔类型字段应以`is_`开头，例如`is_deleted`，`is_active`
- 日期时间类型字段统一使用以下命名：
  - `create_time`: 创建时间
  - `update_time`: 更新时间
  - `delete_time`: 删除时间（如果使用逻辑删除）

#### 1.1.3 主外键命名
- 主键命名为`id`
- 外键命名为`<表名>_id`，例如`user_id`，`role_id`

### 1.2 数据类型规范
- 整数类型推荐使用：
  - 自增ID：`BIGINT`
  - 普通整数：`INT`
  - 小范围整数：`TINYINT`
- 字符串类型推荐：
  - 短文本：`VARCHAR(长度)`
  - 长文本：`TEXT`
- 日期时间类型：统一使用`DATETIME`
- 布尔值：使用`TINYINT(1)`，0表示false，1表示true

### 1.3 索引规范
- 索引名称格式：`idx_<字段名>`，例如`idx_user_id`
- 唯一索引名称格式：`uk_<字段名>`，例如`uk_username`
- 主键索引名称为`PRIMARY KEY`
- 外键索引名称与索引名保持一致

## 2. Java实体类设计规范

### 2.1 命名规范
- 类名使用帕斯卡命名法（Pascal Case，首字母大写）
- 实体类名应与数据库表名对应，但使用帕斯卡命名法，例如：表名`user_info` -> 类名`UserInfo`
- 字段名使用驼峰命名法（Camel Case），例如：字段`user_name` -> 属性`userName`
- 实体类应位于`entity`包下

### 2.2 类结构规范
- 所有实体类应实现`Serializable`接口
- 实体类属性应使用包装类型而非基本类型，例如使用`Integer`而非`int`
- 日期时间类型统一使用`java.util.Date`
- 每个字段都应该有对应的getter和setter方法

### 2.3 注解使用规范
- 使用`@Data`、`@Getter`、`@Setter`、`@NoArgsConstructor`等Lombok注解简化代码
- 使用`@TableName`注解标识对应的数据库表名
- 使用`@TableId`标注主键，明确主键策略
- 使用`@TableField`注解标识字段名，处理字段与属性的映射

## 3. MyBatis映射规范

### 3.1 XML文件命名与结构
- 映射文件命名：`<Entity>Mapper.xml`，例如`UserMapper.xml`
- 一个实体对应一个Mapper接口和XML文件
- 映射文件应放置在`resources/mapper`目录下

### 3.2 SQL编写规范
- SQL关键字统一使用大写，例如：`SELECT`、`INSERT INTO`、`UPDATE`等
- 表名和字段名统一使用小写，保持与数据库定义一致
- 使用缩进和换行提高SQL可读性
- 推荐使用`resultMap`来映射结果集，而不是简单的`resultType`
- 对于复杂的SQL查询，使用注释说明其目的和逻辑

### 3.3 参数命名规范
- 参数名使用驼峰命名法
- 参数名应该具有描述性，清晰表达其用途

## 4. 数据库与实体类一致性要求

### 4.1 字段映射
- 实体类中的每个属性必须与数据库表中的字段一一对应
- 实体类属性名应遵循驼峰命名法，与数据库表中的下划线分隔的字段名对应
- 实体类属性类型应与数据库字段类型相匹配，遵循标准的Java-SQL类型映射

### 4.2 关系映射
- 一对一、一对多、多对多关系应通过适当的注解或XML配置清晰定义
- 复杂关系应考虑使用专门的DTO类进行处理

### 4.3 继承与组合
- 优先使用组合而非继承来处理实体类间的关系
- 当使用继承时，应明确基类与子类的职责边界 