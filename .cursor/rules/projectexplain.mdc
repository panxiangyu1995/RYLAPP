---
description: 
globs: 
alwaysApply: true
---
# 瑞屹林工程师APP项目概述

## 项目目的
瑞屹林工程师APP是一个面向科研仪器维修公司内部员工（工程师、销售、仓库管理员等）使用的移动端应用程序。该应用基于高保真原型开发，旨在提供公司内部任务管理、设备维修、客户服务等功能。

## 业务流程概述
1. 客户通过微信小程序提交仪器维修、保养、回收、租赁、培训预约、验证、选型、安装等类型的订单
2. 订单上传到服务器后，APP后端将订单信息推送给工程师移动端APP
3. 工程师在APP中接单，处理任务，完成对应的工作流程
4. 工作流程包括评估、方案制定、报价、执行服务、验证、完成等环节
5. 客户通过小程序可以查看工作进度和结果，并进行评价

## 项目结构

### 前端部分 (ryl-engineer-app)
- 基于Vue 3框架构建
- 使用Vite作为构建工具
- 使用Vue Router进行路由管理
- 使用Pinia进行状态管理
- 使用Axios进行HTTP请求
- 基于vue-toastification提供通知功能

### 后端部分 (ryl-engineer-back)
- 基于Spring Boot 2.7.18构建
- 使用MyBatis 3.5.15进行数据库操作
- 使用MyBatis-Plus提供增强功能
- 使用PageHelper进行分页处理
- 使用Spring Security和JWT进行身份认证和授权
- 使用Lombok简化代码
- 使用Flyway进行数据库版本控制
- 使用SpringDoc OpenAPI生成API文档
- 使用SQL Server作为数据库

## 角色与权限
系统定义了4种角色：
1. **系统管理员（ROLE_ADMIN）**：拥有所有权限
2. **工程师（ROLE_ENGINEER）**：负责维修和保养，具有设备和任务管理权限
3. **仓库管理员（ROLE_WAREHOUSE）**：负责库存管理，具有仓库管理权限
4. **客户经理（ROLE_SALES）**：负责客户关系管理，具有客户管理和报表查看权限

## 主要功能模块
1. 用户管理：登录、个人信息管理、密码修改
2. 任务管理：任务列表、任务详情、任务流程处理
3. 设备管理：设备信息、维修记录
4. 库存管理：备件入库、出库、盘点
5. 客户管理：客户信息、客户跟进
6. 报表统计：工作统计、评价统计

## 技术特点
1. 前后端分离架构
2. RESTful API设计
3. 基于角色的访问控制
4. 响应式移动端设计
5. 工作流驱动的业务处理
## 项目整体结构
研仪联工程师APP项目是一个前后端分离的应用，由以下主要部分组成：

1. **前端项目** - `ryl-engineer-app`：基于Vue 3开发的移动端应用
2. **后端项目** - `ryl-engineer-back`：基于Spring Boot开发的后端服务
3. **文档目录** - 包含多个说明文档、接口文件和项目说明

## 前端项目结构 (ryl-engineer-app)

```
ryl-engineer-app/
├── public/             # 静态资源文件
├── src/                # 源代码目录
│   ├── api/            # API接口定义
│   ├── assets/         # 资源文件（图片、字体等）
│   ├── components/     # 公共组件
│   ├── constants/      # 常量定义
│   ├── layouts/        # 布局组件
│   ├── router/         # 路由配置
│   ├── stores/         # Pinia状态管理
│   ├── types/          # TypeScript类型定义
│   ├── utils/          # 工具函数
│   ├── views/          # 页面组件
│   ├── App.vue         # 根组件
│   ├── main.js         # 入口文件
│   └── style.css       # 全局样式
├── index.html          # HTML模板
├── package.json        # 项目依赖配置
├── vite.config.js      # Vite配置
└── README.md           # 项目说明
```

### 前端主要模块说明

1. **api/**：包含与后端API交互的函数，按模块分文件
2. **components/**：通用组件，如表单、列表、卡片等
3. **views/**：页面组件，对应路由
   - 任务管理相关页面
   - 设备管理相关页面
   - 用户相关页面
   - 仓库管理相关页面
   - 客户管理相关页面
   - 系统管理相关页面
4. **stores/**：Pinia状态管理，包含用户信息、任务信息等
5. **router/**：路由配置，包含路由守卫和权限控制

## 后端项目结构 (ryl-engineer-back)

```
ryl-engineer-back/
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/
│   │   │       └── ryl/
│   │   │           ├── common/         # 通用工具和类
│   │   │           │   ├── annotation/ # 自定义注解
│   │   │           │   ├── config/     # 通用配置
│   │   │           │   ├── constant/   # 常量定义
│   │   │           │   ├── exception/  # 异常处理
│   │   │           │   ├── util/       # 工具类
│   │   │           │   └── response/   # 响应封装
│   │   │           ├── config/         # 全局配置
│   │   │           └── engineer/       # 业务模块
│   │   │               ├── controller/ # 控制器
│   │   │               ├── service/    # 服务层
│   │   │               │   └── impl/   # 服务实现
│   │   │               ├── mapper/     # 数据访问层
│   │   │               ├── entity/     # 实体类
│   │   │               ├── dto/        # 数据传输对象
│   │   │               └── vo/         # 视图对象
│   │   └── resources/
│   │       ├── application.yml         # 应用配置
│   │       ├── application-dev.yml     # 开发环境配置
│   │       ├── application-prod.yml    # 生产环境配置
│   │       ├── mapper/                 # MyBatis映射文件
│   │       └── db/migration/           # Flyway数据库脚本
│   └── test/                           # 测试代码
├── pom.xml                             # Maven配置
└── README.md                           # 项目说明
```

### 后端主要模块说明

1. **common/**：通用工具和类，包括异常处理、响应封装、工具类等
2. **config/**：全局配置，包括安全配置、跨域配置、Swagger配置等
3. **engineer/**：业务模块，按功能划分为多个子模块
   - **controller/**：控制器层，处理HTTP请求
   - **service/**：服务层，实现业务逻辑
   - **mapper/**：数据访问层，与数据库交互
   - **entity/**：实体类，对应数据库表
   - **dto/**：数据传输对象，用于接收请求参数
   - **vo/**：视图对象，用于返回给前端的数据

## 项目文档结构

```
/
├── 使用说明/         # 用户使用手册
├── 接口文件/         # API接口文档和数据库脚本
├── 示例/             # 代码示例和参考
├── 角色/             # 角色权限文档
└── 项目说明/         # 项目需求和流程说明
```

## 项目说明
- 本项目是在科研仪器维修公司内部工程师、销售、仓库管理员等在公司内部使用的移动端APP高保真原型基础上进行APP工程开发。

ryl-uniapp是小程序的前端
ryl-miniprogram-server是小程序的后端服务


### 具体要求如下
- 前后端数据字段不要使用任何数据库没有的字段，比如：邮箱、职位等
- 因为APP使用者都是公司内部员工，所以每个用户的联系人列表默认是所有用户
- 前后端不要使用模拟数据，也不要使用示例，按实际项目进行代码的编写。
- 后端数据库初始化文件目录：sql

